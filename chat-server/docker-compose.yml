version: '3.8'

services:
  # PostgreSQL 데이터베이스 (공유)
  postgres:
    image: postgres:15-alpine
    container_name: chat-postgres
    environment:
      POSTGRES_DB: chatdb
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatuser -d chatdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chat-network

  # Redis 메시지 브로커 (공유)
  redis:
    image: redis:7-alpine
    container_name: chat-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - chat-network

  chat-app-1:
    build: .
    container_name: chat-app-1
    hostname: chat-app-1
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/api/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - chat-network

  chat-app-2:
    build: .
    container_name: chat-app-2
    hostname: chat-app-2
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/api/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - chat-network

  chat-app-3:
    build: .
    container_name: chat-app-3
    hostname: chat-app-3
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/api/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - chat-network

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: chat-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - chat-app-1
      - chat-app-2
      - chat-app-3
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chat-network


# 볼륨 정의
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# 네트워크 정의
networks:
  chat-network:
    driver: bridge